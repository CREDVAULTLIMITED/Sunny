{"ast":null,"code":"var _jsxFileName = \"/home/sam/Downloads/Sunny-main/src/components/dashboard/charts/CountryDistributionMap.jsx\";\nimport React from 'react';\nimport { ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\nimport './Charts.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://raw.githubusercontent.com/deldersveld/topojson/master/world-countries.json\";\nconst CountryDistributionMap = ({\n  data\n}) => {\n  if (!data || data.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-no-data\",\n      children: \"No country distribution data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Find max volume for scaling\n  const maxVolume = Math.max(...data.map(item => item.volume));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(ComposableMap, {\n      projection: \"geoMercator\",\n      children: [/*#__PURE__*/_jsxDEV(Geographies, {\n        geography: geoUrl,\n        children: ({\n          geographies\n        }) => geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n          geography: geo,\n          fill: \"#EAEAEC\",\n          stroke: \"#D6D6DA\"\n        }, geo.rsmKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), data.map(country => {\n        const countryCode = country.country;\n        const size = Math.max(5, Math.sqrt(country.volume / maxVolume) * 30);\n\n        // Map country codes to coordinates (simplified)\n        const coordinates = getCountryCoordinates(countryCode);\n        if (coordinates) {\n          return /*#__PURE__*/_jsxDEV(Marker, {\n            coordinates: coordinates,\n            children: /*#__PURE__*/_jsxDEV(\"circle\", {\n              r: size,\n              fill: \"#0070f3\",\n              fillOpacity: 0.3,\n              stroke: \"#0070f3\",\n              strokeWidth: 2\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 17\n            }, this)\n          }, countryCode, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this);\n        }\n        return null;\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-legend\",\n      children: data.slice(0, 5).map((item, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"legend-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-color\",\n          style: {\n            backgroundColor: '#0070f3'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-label\",\n          children: getCountryName(item.country)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"legend-value\",\n          children: new Intl.NumberFormat('en-US', {\n            style: 'currency',\n            currency: 'USD',\n            maximumFractionDigits: 0\n          }).format(item.volume)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper function to get country coordinates\n_c = CountryDistributionMap;\nfunction getCountryCoordinates(code) {\n  const coordinates = {\n    US: [-95, 38],\n    GB: [0, 55],\n    CA: [-106, 56],\n    AU: [133, -25],\n    DE: [10, 51],\n    FR: [2, 46],\n    JP: [138, 36],\n    IN: [78, 21],\n    BR: [-53, -10],\n    ZA: [24, -29]\n  };\n  return coordinates[code];\n}\n\n// Helper function to get country name\nfunction getCountryName(code) {\n  const names = {\n    US: 'United States',\n    GB: 'United Kingdom',\n    CA: 'Canada',\n    AU: 'Australia',\n    DE: 'Germany',\n    FR: 'France',\n    JP: 'Japan',\n    IN: 'India',\n    BR: 'Brazil',\n    ZA: 'South Africa'\n  };\n  return names[code] || code;\n}\nexport default CountryDistributionMap;\nvar _c;\n$RefreshReg$(_c, \"CountryDistributionMap\");","map":{"version":3,"names":["React","ComposableMap","Geographies","Geography","Marker","jsxDEV","_jsxDEV","geoUrl","CountryDistributionMap","data","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","maxVolume","Math","max","map","item","volume","projection","geography","geographies","geo","fill","stroke","rsmKey","country","countryCode","size","sqrt","coordinates","getCountryCoordinates","r","fillOpacity","strokeWidth","slice","index","style","backgroundColor","getCountryName","Intl","NumberFormat","currency","maximumFractionDigits","format","_c","code","US","GB","CA","AU","DE","FR","JP","IN","BR","ZA","names","$RefreshReg$"],"sources":["/home/sam/Downloads/Sunny-main/src/components/dashboard/charts/CountryDistributionMap.jsx"],"sourcesContent":["import React from 'react';\nimport { ComposableMap, Geographies, Geography, Marker } from \"react-simple-maps\";\nimport './Charts.css';\n\nconst geoUrl = \"https://raw.githubusercontent.com/deldersveld/topojson/master/world-countries.json\";\n\nconst CountryDistributionMap = ({ data }) => {\n  if (!data || data.length === 0) {\n    return <div className=\"chart-no-data\">No country distribution data available</div>;\n  }\n\n  // Find max volume for scaling\n  const maxVolume = Math.max(...data.map(item => item.volume));\n  \n  return (\n    <div className=\"map-container\">\n      <ComposableMap projection=\"geoMercator\">\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map(geo => (\n              <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                fill=\"#EAEAEC\"\n                stroke=\"#D6D6DA\"\n              />\n            ))\n          }\n        </Geographies>\n        {data.map((country) => {\n          const countryCode = country.country;\n          const size = Math.max(5, Math.sqrt(country.volume / maxVolume) * 30);\n          \n          // Map country codes to coordinates (simplified)\n          const coordinates = getCountryCoordinates(countryCode);\n          \n          if (coordinates) {\n            return (\n              <Marker key={countryCode} coordinates={coordinates}>\n                <circle \n                  r={size} \n                  fill=\"#0070f3\" \n                  fillOpacity={0.3} \n                  stroke=\"#0070f3\"\n                  strokeWidth={2}\n                />\n              </Marker>\n            );\n          }\n          return null;\n        })}\n      </ComposableMap>\n      \n      <div className=\"map-legend\">\n        {data.slice(0, 5).map((item, index) => (\n          <div key={index} className=\"legend-item\">\n            <div className=\"legend-color\" style={{ backgroundColor: '#0070f3' }}></div>\n            <div className=\"legend-label\">{getCountryName(item.country)}</div>\n            <div className=\"legend-value\">\n              {new Intl.NumberFormat('en-US', {\n                style: 'currency',\n                currency: 'USD',\n                maximumFractionDigits: 0\n              }).format(item.volume)}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\n// Helper function to get country coordinates\nfunction getCountryCoordinates(code) {\n  const coordinates = {\n    US: [-95, 38],\n    GB: [0, 55],\n    CA: [-106, 56],\n    AU: [133, -25],\n    DE: [10, 51],\n    FR: [2, 46],\n    JP: [138, 36],\n    IN: [78, 21],\n    BR: [-53, -10],\n    ZA: [24, -29]\n  };\n  return coordinates[code];\n}\n\n// Helper function to get country name\nfunction getCountryName(code) {\n  const names = {\n    US: 'United States',\n    GB: 'United Kingdom',\n    CA: 'Canada',\n    AU: 'Australia',\n    DE: 'Germany',\n    FR: 'France',\n    JP: 'Japan',\n    IN: 'India',\n    BR: 'Brazil',\n    ZA: 'South Africa'\n  };\n  return names[code] || code;\n}\n\nexport default CountryDistributionMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}