{"ast":null,"code":"var _jsxFileName = \"/home/sam/Downloads/Sunny-main/src/components/dashboard/charts/TransactionVolumeChart.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport './Charts.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TransactionVolumeChart = ({\n  data\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (!data || !data.length || !canvasRef.current) return;\n    const ctx = canvasRef.current.getContext('2d');\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n    // Set dimensions\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const padding = 40;\n    const chartWidth = width - padding * 2;\n    const chartHeight = height - padding * 2;\n\n    // Find min and max values\n    const maxVolume = Math.max(...data.map(item => item.volume)) * 1.1; // Add 10% padding\n\n    // Draw axes\n    ctx.beginPath();\n    ctx.moveTo(padding, padding);\n    ctx.lineTo(padding, height - padding);\n    ctx.lineTo(width - padding, height - padding);\n    ctx.strokeStyle = '#e2e8f0';\n    ctx.stroke();\n\n    // Draw horizontal grid lines\n    const gridLines = 5;\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.font = '10px Inter, sans-serif';\n    ctx.fillStyle = '#94a3b8';\n    for (let i = 0; i <= gridLines; i++) {\n      const y = padding + (gridLines - i) / gridLines * chartHeight;\n      const value = i / gridLines * maxVolume;\n      ctx.beginPath();\n      ctx.moveTo(padding, y);\n      ctx.lineTo(width - padding, y);\n      ctx.strokeStyle = '#f1f5f9';\n      ctx.stroke();\n\n      // Draw y-axis labels\n      ctx.fillText(new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        notation: 'compact',\n        maximumFractionDigits: 1\n      }).format(value), padding - 5, y);\n    }\n\n    // Draw data points and line\n    if (data.length > 1) {\n      const pointWidth = chartWidth / (data.length - 1);\n\n      // Draw line\n      ctx.beginPath();\n      data.forEach((item, index) => {\n        const x = padding + index * pointWidth;\n        const y = height - padding - item.volume / maxVolume * chartHeight;\n        if (index === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      });\n      ctx.strokeStyle = '#0070f3';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n\n      // Draw area under the line\n      ctx.lineTo(padding + (data.length - 1) * pointWidth, height - padding);\n      ctx.lineTo(padding, height - padding);\n      ctx.closePath();\n      ctx.fillStyle = 'rgba(0, 112, 243, 0.1)';\n      ctx.fill();\n\n      // Draw data points\n      data.forEach((item, index) => {\n        const x = padding + index * pointWidth;\n        const y = height - padding - item.volume / maxVolume * chartHeight;\n\n        // Draw point\n        ctx.beginPath();\n        ctx.arc(x, y, 4, 0, 2 * Math.PI);\n        ctx.fillStyle = '#0070f3';\n        ctx.fill();\n        ctx.strokeStyle = 'white';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n\n        // Draw x-axis labels\n        const date = new Date(item.date);\n        const dateLabel = date.toLocaleDateString('en-US', {\n          month: 'short',\n          day: 'numeric'\n        });\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'top';\n        ctx.fillStyle = '#94a3b8';\n        ctx.fillText(dateLabel, x, height - padding + 10);\n      });\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chart-wrapper\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-canvas-container\",\n      children: data && data.length > 0 ? /*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        width: \"600\",\n        height: \"300\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chart-no-data\",\n        children: \"No transaction data available\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(TransactionVolumeChart, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = TransactionVolumeChart;\nexport default TransactionVolumeChart;\nvar _c;\n$RefreshReg$(_c, \"TransactionVolumeChart\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","TransactionVolumeChart","data","_s","canvasRef","length","current","ctx","getContext","clearRect","width","height","padding","chartWidth","chartHeight","maxVolume","Math","max","map","item","volume","beginPath","moveTo","lineTo","strokeStyle","stroke","gridLines","textAlign","textBaseline","font","fillStyle","i","y","value","fillText","Intl","NumberFormat","style","currency","notation","maximumFractionDigits","format","pointWidth","forEach","index","x","lineWidth","closePath","fill","arc","PI","date","Date","dateLabel","toLocaleDateString","month","day","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sam/Downloads/Sunny-main/src/components/dashboard/charts/TransactionVolumeChart.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './Charts.css';\n\nconst TransactionVolumeChart = ({ data }) => {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    if (!data || !data.length || !canvasRef.current) return;\n\n    const ctx = canvasRef.current.getContext('2d');\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n    \n    // Set dimensions\n    const width = canvasRef.current.width;\n    const height = canvasRef.current.height;\n    const padding = 40;\n    const chartWidth = width - (padding * 2);\n    const chartHeight = height - (padding * 2);\n    \n    // Find min and max values\n    const maxVolume = Math.max(...data.map(item => item.volume)) * 1.1; // Add 10% padding\n    \n    // Draw axes\n    ctx.beginPath();\n    ctx.moveTo(padding, padding);\n    ctx.lineTo(padding, height - padding);\n    ctx.lineTo(width - padding, height - padding);\n    ctx.strokeStyle = '#e2e8f0';\n    ctx.stroke();\n    \n    // Draw horizontal grid lines\n    const gridLines = 5;\n    ctx.textAlign = 'right';\n    ctx.textBaseline = 'middle';\n    ctx.font = '10px Inter, sans-serif';\n    ctx.fillStyle = '#94a3b8';\n    \n    for (let i = 0; i <= gridLines; i++) {\n      const y = padding + ((gridLines - i) / gridLines) * chartHeight;\n      const value = (i / gridLines) * maxVolume;\n      \n      ctx.beginPath();\n      ctx.moveTo(padding, y);\n      ctx.lineTo(width - padding, y);\n      ctx.strokeStyle = '#f1f5f9';\n      ctx.stroke();\n      \n      // Draw y-axis labels\n      ctx.fillText(\n        new Intl.NumberFormat('en-US', {\n          style: 'currency',\n          currency: 'USD',\n          notation: 'compact',\n          maximumFractionDigits: 1\n        }).format(value),\n        padding - 5,\n        y\n      );\n    }\n    \n    // Draw data points and line\n    if (data.length > 1) {\n      const pointWidth = chartWidth / (data.length - 1);\n      \n      // Draw line\n      ctx.beginPath();\n      data.forEach((item, index) => {\n        const x = padding + (index * pointWidth);\n        const y = height - padding - (item.volume / maxVolume) * chartHeight;\n        \n        if (index === 0) {\n          ctx.moveTo(x, y);\n        } else {\n          ctx.lineTo(x, y);\n        }\n      });\n      ctx.strokeStyle = '#0070f3';\n      ctx.lineWidth = 2;\n      ctx.stroke();\n      \n      // Draw area under the line\n      ctx.lineTo(padding + ((data.length - 1) * pointWidth), height - padding);\n      ctx.lineTo(padding, height - padding);\n      ctx.closePath();\n      ctx.fillStyle = 'rgba(0, 112, 243, 0.1)';\n      ctx.fill();\n      \n      // Draw data points\n      data.forEach((item, index) => {\n        const x = padding + (index * pointWidth);\n        const y = height - padding - (item.volume / maxVolume) * chartHeight;\n        \n        // Draw point\n        ctx.beginPath();\n        ctx.arc(x, y, 4, 0, 2 * Math.PI);\n        ctx.fillStyle = '#0070f3';\n        ctx.fill();\n        ctx.strokeStyle = 'white';\n        ctx.lineWidth = 2;\n        ctx.stroke();\n        \n        // Draw x-axis labels\n        const date = new Date(item.date);\n        const dateLabel = date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });\n        \n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'top';\n        ctx.fillStyle = '#94a3b8';\n        ctx.fillText(dateLabel, x, height - padding + 10);\n      });\n    }\n    \n  }, [data]);\n\n  return (\n    <div className=\"chart-wrapper\">\n      <div className=\"chart-canvas-container\">\n        {data && data.length > 0 ? (\n          <canvas ref={canvasRef} width=\"600\" height=\"300\"></canvas>\n        ) : (\n          <div className=\"chart-no-data\">No transaction data available</div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TransactionVolumeChart;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}